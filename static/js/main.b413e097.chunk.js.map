{"version":3,"sources":["Map.js","App.js","Location.js","serviceWorker.js","index.js","logo.svg"],"names":["Map","Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","points","length","param","poi","latitude","longitude","react_default","a","createElement","src","app_id","app_code","getPOIList","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_Map","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOA6CiBA,SCzCCC,YCCKA,wBFCnB,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,IAAK,2GACLC,OAAQ,IAJOT,4EAWjB,GAAIG,KAAKI,MAAME,OAAOC,OAAS,EAAG,CAChC,IAAIC,EAAQ,QACZ,IAAK,IAAIC,KAAOT,KAAKI,MAAME,OACzBE,GAASC,EAAIC,SAAW,IAAMD,EAAIE,UAEpC,OAAOH,EAGT,MAAO,oCAOP,OACEI,EAAAC,EAAAC,cAAA,OACEC,IAAMf,KAAKI,MAAMC,IACb,WAAaL,KAAKJ,MAAMoB,OACxB,aAAehB,KAAKJ,MAAMqB,SAC1BjB,KAAKkB,aAETC,IAAI,oBArCIxB,cGUEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,CAAKX,OAAO,uBAAuBC,SAAS,2BAA6BW,SAASC,eAAe,SDqH3G,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE/HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b413e097.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Map extends Component {\r\n\r\n    // For conciseness simply included all parameters in the querystring directly\r\n  \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        url: 'https://image.maps.api.here.com/mia/1.6/mapview?w=600&h=300&z=10&t=5&poitxs=1&poitxc=black&poitfc=yellow',\r\n        points: [],\r\n      }\r\n    }\r\n  \r\n    // Helper function to format list of points\r\n  \r\n    getPOIList() {\r\n      if (this.state.points.length > 0) {\r\n        let param = '&poi=';\r\n        for (var poi in this.state.points) {\r\n          param += poi.latitude + ',' + poi.longitude;\r\n        }\r\n        return param;\r\n      }\r\n  \r\n      return '';\r\n    }\r\n  \r\n    // Render method builds the URL dynamically to fetch the image from the\r\n    // HERE Map Image API\r\n  \r\n    render() {\r\n      return (\r\n        <img\r\n          src={ this.state.url\r\n            + '&app_id=' + this.props.app_id\r\n            + '&app_code=' + this.props.app_code\r\n            + this.getPOIList()\r\n            }\r\n          alt=\"Todo Map\"/>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  export default Map;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\n// This class definition is a React.Component so that we\r\n// can use it in multiple places for the app.\r\n\r\nclass Location extends Component {\r\n\r\n  // The constructor takes properties defined as element attributes\r\n  // defined in JSX along with an initial default value for state.\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '0,0', // Null Island\r\n      error: null,\r\n    }\r\n  }\r\n\r\n  // When the component is rendered to the DOM for the first time\r\n  // such as at page load we call the Geolocation API to determine\r\n  // a latitude and longitude for the browser\r\n\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          this.setState({\r\n            value: position.coords.latitude + ',' + position.coords.longitude,\r\n            error: null,\r\n          });\r\n        },\r\n        (error) => this.setState(\r\n          {error: error.message}\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n// Respond to user input with event callback\r\n  \r\nchangeLocation(evt) {\r\n    this.setState({\r\n        value: evt.target.value,\r\n      }\r\n    )\r\n  }\r\n\r\n  // The JSX definition for how to render this component on the page.  \r\n  // In this case, it's a simple input field for new todo items.\r\n\r\n  render() {\r\n    return (\r\n            <input\r\n              className=\"new-todo\"\r\n              value={ this.state.value }\r\n              onChange={ evt => this.changeLocation(evt) }\r\n              />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Location;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Location from './Location';\nimport Map from './Map';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Map app_id=\"0MOsfImUqdHKOEjditV6\" app_code=\"L8wyCqwmQMcsDAoPzn-JdA\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}